/** @namespace */var CORE = CORE	|| {};CORE.FullScreen	= CORE.FullScreen	|| {};CORE.FullScreen.available = function(){	return this._hasWebkitFullScreen || this._hasMozFullScreen;}/** * test if fullscreen is currently activated *  * @returns {Boolean} true if fullscreen is currently activated, false otherwise*/CORE.FullScreen.activated = function(){	if(this._hasWebkitFullScreen)	{		return document.webkitIsFullScreen;	}	else if(this._hasMozFullScreen)	{		return document.mozFullScreen;	}	else	{		console.assert(false);	}}/** * Request fullscreen on a given element * @param {DomElement} element to make fullscreen. optional. default to document.body*/CORE.FullScreen.request	= function(element){	element	= element || document.body;	if(this._hasWebkitFullScreen)	{		element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);	}	else if(this._hasMozFullScreen)	{		element.mozRequestFullScreen();	}	else	{		console.assert(false);	}}/** * Cancel fullscreen*/CORE.FullScreen.cancel = function(){	if(this._hasWebkitFullScreen)	{		document.webkitCancelFullScreen();	}	else if(this._hasMozFullScreen)	{		document.mozCancelFullScreen();	}	else	{		console.assert(false);	}}// internal functions to know which fullscreen API implementation is availableCORE.FullScreen._hasWebkitFullScreen	= 'webkitCancelFullScreen' in document	? true : false;	CORE.FullScreen._hasMozFullScreen	= 'mozCancelFullScreen' in document	? true : false;	/** * Bind a key to renderer screenshot * usage: CORE.FullScreen.bindKey({ charCode : 'a'.charCodeAt(0) }); */CORE.FullScreen.bindKey	= function(opts){	opts		= opts		|| {};	var charCode	= opts.charCode	|| 'f'.charCodeAt(0);	var dblclick	= opts.dblclick !== undefined ? opts.dblclick : false;	var element	= opts.element	var toggle = function()	{		if(CORE.FullScreen.activated())		{			CORE.FullScreen.cancel();		}		else		{			CORE.FullScreen.request(element);		}			}	var onKeyPress	= function(event)	{		if( event.which !== charCode )	return;		toggle();	}.bind(this);	document.addEventListener('keypress', onKeyPress, false);	dblclick && document.addEventListener('dblclick', toggle, false);	return {		unbind	: function()		{			document.removeEventListener('keypress', onKeyPress, false);			dblclick && document.removeEventListener('dblclick', toggle, false);		}	};}